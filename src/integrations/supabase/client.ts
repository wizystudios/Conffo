
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://obijcwprhqyslfplnego.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9iaWpjd3ByaHF5c2xmcGxuZWdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY4MDAzOTAsImV4cCI6MjA2MjM3NjM5MH0.Ry6g1QVdQVk8g0jRyes99cHWWD5N2ZwXh8U3_4gE2Sg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
});

// Add some debugging for auth state changes
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Auth state changed:', event, session?.user?.id);
});

// Helper functions to work with user follows until types are updated
export const addFollow = async (followerId: string, followingId: string) => {
  // Use direct table operations instead of RPC until types are updated
  return supabase
    .from('user_follows')
    .insert({ 
      follower_id: followerId, 
      following_id: followingId 
    })
    .throwOnError();
};

export const removeFollow = async (followerId: string, followingId: string) => {
  // Use direct table operations instead of RPC until types are updated
  return supabase
    .from('user_follows')
    .delete()
    .eq('follower_id', followerId)
    .eq('following_id', followingId)
    .throwOnError();
};

export const checkIfFollowing = async (followerId: string, followingId: string) => {
  // Use direct query instead of RPC until types are updated
  const { data, error } = await supabase
    .from('user_follows')
    .select('id')
    .eq('follower_id', followerId)
    .eq('following_id', followingId)
    .maybeSingle();
    
  if (error) throw error;
  return !!data;
};

export const getFollowersCount = async (userId: string) => {
  // Use direct count instead of RPC until types are updated
  const { count, error } = await supabase
    .from('user_follows')
    .select('*', { count: 'exact', head: true })
    .eq('following_id', userId);
    
  if (error) throw error;
  return count || 0;
};

export const getFollowingCount = async (userId: string) => {
  // Use direct count instead of RPC until types are updated
  const { count, error } = await supabase
    .from('user_follows')
    .select('*', { count: 'exact', head: true })
    .eq('follower_id', userId);
    
  if (error) throw error;
  return count || 0;
};
